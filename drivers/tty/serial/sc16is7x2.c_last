#include <linux/kernel.h>
#include <linux/slab.h>
//#include <linux/device.h>
#include <linux/module.h>
#include <linux/init.h>
#include <linux/i2c.h>
#include <linux/interrupt.h>

#include <linux/iio/iio.h>
#include <linux/platform_data/sc16is7x2.h>

#include <linux/serial_reg.h>
#include <linux/serial_core.h>

//#include <linux/i2c-pb206x-platform.h>

#define DRIVER_NAME		"sc16is7x2"
#define TYPE_NAME		"SC16IS7x2"

#define MAX_SC16IS7X2		8
#define FIFO_SIZE		64

#define REG_READ	0x80
#define REG_WRITE	0x00

/* Special registers */
#define REG_SPR	    0x07	/* Test character register */
#define REG_TXLVL	0x08	/* Transmitter FIFO Level register */
#define REG_RXLVL	0x09	/* Receiver FIFO Level register */
#define REG_IOD		0x0A	/* IO Direction register */
#define REG_IOS		0x0B	/* IO State register */
#define REG_IOI		0x0C	/* IO Interrupt Enable register */
#define REG_IOC		0x0E	/* IO Control register */
#define REG_EFCR	0x0F	/* Extra Features Control Register */


#define IOC_SRESET	0x08    /* Software reset */
#define IOC_GPIO30	0x04    /* GPIO 3:0 unset: as IO, set: as modem pins */
#define IOC_GPIO74	0x02    /* GPIO 7:4 unset: as IO, set: as modem pins */
#define IOC_IOLATCH	0x01    /* Unset: input unlatched, set: input latched */

#define EFCR_RTSINVER 0x20  /* Invert not-RTS signal in RS-485 mode */
#define EFCR_RTSCON   0x10  /* Auto RS-485 mode: Enable the transmitter to control the RTS pin. */


struct sc16is7x2_chip;

static struct uart_driver sc16is7x2_uart_driver = {
    .owner          = THIS_MODULE,
    .driver_name    = DRIVER_NAME,
    .dev_name       = "ttyNSC",
    .nr             = MAX_SC16IS7X2,
};

/*
 * Some registers must be read back to modify.
 * To save time we cache them here in memory.
 */
struct sc16is7x2_channel {
    //    struct spi_transfer	t;
    //    struct spi_message	m;
    //    u8		test_buf[4];

    struct sc16is7x2_chip	*chip;	/* back link */
    struct uart_port	uart;

    /* Workqueue that does all the magic */
    struct workqueue_struct *workqueue;
    struct work_struct	work;

    u16		quot;		/* baud rate divisor */
    u8		iir;		/* state of IIR register */
    u8		lsr;		/* state of LSR register */
    u8		msr;		/* state of MSR register */
    u8		ier;		/* cache for IER register */
    u8		fcr;		/* cache for FCR register */
    u8		lcr;		/* cache for LCR register */
    u8		mcr;		/* cache for MCR register */
    u8		efr;		/* cache for EFR register */
    u8      efcr;       /* cache for EFCR register */

#ifdef DEBUG
    bool		handle_irq;
#endif
    bool		handle_baud;	/* baud rate needs update */
    bool		handle_regs;	/* other regs need update */
    u8		buf[FIFO_SIZE+1]; /* fifo transfer buffer */
};

/* Each client has this additional data */
struct sc16is7x2_chip {
    struct i2c_client *client;

#if 0
    struct mutex lock;
    struct iio_dev	*indio_dev;
#endif
    struct sc16is7x2_channel channel[2];

    unsigned int	uartclk;
    /* uart line number of the first channel */
    unsigned	uart_base;
    /* number assigned to the first GPIO */
    unsigned	gpio_base;

    char		*gpio_label;
    /* list of GPIO names (array length = SC16IS7X2_NR_GPIOS) */
    const char	*const *gpio_names;

    //#ifdef CONFIG_GPIOLIB
    //    struct gpio_chip gpio;
    //    struct mutex	io_lock;	/* lock for GPIO functions */
    //    u8		io_dir;		/* cache for IODir register */
    //    u8		io_state;	/* cache for IOState register */
    //    u8		io_gpio;	/* PIN is GPIO */
    //    u8		io_control;	/* cache for IOControl register */
    //#endif
};

static inline u8 write_cmd(u8 reg, u8 ch)
{
    return REG_WRITE | (reg & 0xf) << 3 | (ch & 0x1) << 1;
}

static inline u8 read_cmd(u8 reg, u8 ch)
{
    return REG_READ  | (reg & 0xf) << 3 | (ch & 0x1) << 1;
}

/*
 * sc16is7x2_write - Write a new register content (sync)
 * @reg: Register offset
 * @ch:  Channel (0 or 1)
 */
static int sc16is7x2_write(struct i2c_client *client, u8 reg, u8 ch, u8 val)
{
    u8 out;
    out = write_cmd(reg, ch);

    printk("%s (%i) reg %x val %x cmdhex %x \n", __func__, ch, reg, val, out);

    //    return spi_write(ts->spi, out, sizeof(out));

    return i2c_smbus_write_byte_data(client, out, val);
}

/**
 * sc16is7x2_read - Read back register content
 * @reg: Register offset
 * @ch:  Channel (0 or 1)
 *
 * Returns positive 8 bit value from the device if successful or a
 * negative value on error
 */
static int sc16is7x2_read(struct i2c_client *client, unsigned reg, unsigned ch)
{
    printk("%s (%i) reg %x cmd %x \n", __func__, ch, reg, read_cmd(reg, ch));
    //    return spi_w8r8(ts->spi, read_cmd(reg, ch));
    //    return i2c_smbus_read_byte_data(client, read_cmd(reg, ch));

    return i2c_smbus_read_byte_data(client, read_cmd(reg, ch));
}

/* ******************************** IRQ ********************************* */
/* Trigger work thread*/
static void sc16is7x2_dowork(struct sc16is7x2_channel *chan)
{
    printk("sc16is7x2_dowork \n");
    struct sc16is7x2_chip *ts = chan->chip;
    struct i2c_client *client = ts->client;
    if (!freezing(current)) {

        i2c_smbus_write_byte_data(client, 0xa8, 0x00);

        //~ struct timespec ts_start;
        //~ getnstimeofday(&ts_start);
        //~ printk("request queue work at %lu s, %lu ns\n", ts_start.tv_sec, ts_start.tv_nsec);

        //        chan->t.tx_buf = chan->test_buf;
        //        chan->test_buf[0] = 0xa8;
        //        chan->test_buf[1] = 0x00;
        //        chan->t.len = 2;
        //        spi_message_init(&chan->m);
        //        spi_message_add_tail(&chan->t, &chan->m);
        //        chan->m.complete = &sc16is7x2_test_spi_complete;

        printk("test i2c transfer completed\n");

        //~ spi_async(chan->chip->spi, &chan->m);

        queue_work(chan->workqueue, &chan->work);
    }
}

static irqreturn_t sc16is7x2_irq(int irq, void *data)
{
    struct sc16is7x2_channel *chan = data;

#ifdef DEBUG
    /* Indicate irq */
    chan->handle_irq = true;
#endif

    /* Trigger work thread */
    sc16is7x2_dowork(chan);

    return IRQ_HANDLED;
}

/* ********************************  ********************************* */
static int sc16is7x2_handle_rx(struct i2c_client *client, unsigned ch)
{
    printk("%s channel %d\n", __func__, ch);
    struct sc16is7x2_chip *ts = i2c_get_clientdata(client);
    struct sc16is7x2_channel *chan = &ts->channel[ch];
    struct uart_port *uart = &chan->uart;
    struct tty_port *tty = &uart->state->port;
    //    struct spi_message message;
    //    struct spi_transfer t[2];
    unsigned long flags;
    u8 lsr = chan->lsr;
    int rxlvl;

    struct timespec ts_start;
    getnstimeofday(&ts_start);
    printk("%s channel %d at %lu s, %lu ns\n", __func__, ch, ts_start.tv_sec, ts_start.tv_nsec);

    rxlvl = sc16is7x2_read(client, REG_RXLVL, ch);

    if (rxlvl <= 0) {
        return 0;
    } else if (rxlvl >= FIFO_SIZE) {
        /* Ensure sanity of RX level */
        rxlvl = FIFO_SIZE;

        printk("%s (%i) overrun!\n", __func__, ch);

    }

    i2c_smbus_read_i2c_block_data(client, read_cmd(UART_RX, ch), rxlvl, chan->buf);
    //    memset(t, 0, sizeof t);
    //    chan->buf[0] = ;
    //    t[0].len = 1;
    //    t[0].tx_buf = &chan->buf[0];
    //    //~ t[0].rx_buf = 0;
    //    t[1].len = rxlvl;
    //    t[1].rx_buf = &chan->buf[1];
    //    //~ t[1].tx_buf = 0;

    //    sc16is7x2_write(client, read_cmd(UART_RX, ch), 0);
    //    spi_message_init(&message);
    //    spi_message_add_tail(&t[0], &message);
    //    spi_message_add_tail(&t[1], &message);

    chan->buf[rxlvl + 1] = '\0';
    //~ printk(&ts->spi->dev, "%s\n", &chan->buf[1]);

    spin_lock_irqsave(&uart->lock, flags);

    if (unlikely(lsr & UART_LSR_BRK_ERROR_BITS)) {
        /*
         * For statistics only
         */
        if (lsr & UART_LSR_BI) {
            lsr &= ~(UART_LSR_FE | UART_LSR_PE);
            chan->uart.icount.brk++;
            /*
             * We do the SysRQ and SAK checking
             * here because otherwise the break
             * may get masked by ignore_status_mask
             * or read_status_mask.
             */
            if (uart_handle_break(&chan->uart))
                goto ignore_char;
        } else if (lsr & UART_LSR_PE)
            chan->uart.icount.parity++;
        else if (lsr & UART_LSR_FE)
            chan->uart.icount.frame++;
        if (lsr & UART_LSR_OE)
            chan->uart.icount.overrun++;
    }

    /* Insert received data */
    tty_insert_flip_string(tty, &chan->buf[1], rxlvl);
    /* Update RX counter */
    uart->icount.rx += rxlvl;

ignore_char:
    spin_unlock_irqrestore(&uart->lock, flags);

    /* Push the received data to receivers */
    if (rxlvl)
        tty_flip_buffer_push(tty);
    return rxlvl;
    //~ printk(" %s (%i) %d bytes\n", __func__, ch, rxlvl);

}

static void sc16is7x2_handle_tx(struct i2c_client *client, unsigned ch)
{
    struct sc16is7x2_chip *ts = i2c_get_clientdata(client);
    struct sc16is7x2_channel *chan = &ts->channel[ch];
    struct uart_port *uart = &chan->uart;
    struct circ_buf *xmit = &uart->state->xmit;
    unsigned long flags;
    unsigned i, len;
    int txlvl;

    printk("%s channel %d\n", __func__, ch);
    //    printk("%s channel %d at %lu s, %lu ns\n", __func__, ch, ts_start.tv_sec, ts_start.tv_nsec);
    if (chan->uart.x_char && chan->lsr & UART_LSR_THRE) {
        printk("tx: x-char\n");
        sc16is7x2_write(client, UART_TX, ch, uart->x_char);
        uart->icount.tx++;
        uart->x_char = 0;
        return;
    }
    if (uart_circ_empty(xmit) || uart_tx_stopped(&chan->uart))
        /* No data to send or TX is stopped */
        return;

    txlvl = sc16is7x2_read(client, REG_TXLVL, ch);
    if (txlvl <= 0) {
        printk("%s (%i) fifo full\n", __func__, ch);
        return;
    }

    txlvl = min(txlvl, 30);

    /* number of bytes to transfer to the fifo */

    printk("%s (%i) %d txlvl\n", __func__, ch, txlvl);

    len = min(txlvl, (int)uart_circ_chars_pending(xmit));

    printk("%s (%i) %d bytes\n", __func__, ch, len);

    spin_lock_irqsave(&uart->lock, flags);
    for (i = 0; i <= len-1 ; i++) {
        chan->buf[i] = xmit->buf[xmit->tail];
        xmit->tail = (xmit->tail + 1) & (UART_XMIT_SIZE - 1);
    }
    uart->icount.tx += len;
    spin_unlock_irqrestore(&uart->lock, flags);

    //    chan->buf[0] = write_cmd(UART_TX, ch);

    i2c_smbus_write_block_data(client, write_cmd(UART_TX, ch), len, chan->buf);
    //    if (spi_write(ts->spi, chan->buf, len + 1))
    //~ if (sc16is7x2_spi_sync_write(ts, chan->buf, len + 1))
    printk("SPI transfer TX handling failed\n");

    if (uart_circ_chars_pending(xmit) < WAKEUP_CHARS)
        uart_write_wakeup(uart);
}

static void sc16is7x2_handle_baud(struct i2c_client *client, unsigned ch)
{
    struct sc16is7x2_chip *ts = i2c_get_clientdata(client);
    struct sc16is7x2_channel *chan = &ts->channel[ch];

    if (!chan->handle_baud)
        return;

    printk("%s\n", __func__);

    sc16is7x2_write(client, UART_IER, ch, 0);
    sc16is7x2_write(client, UART_LCR, ch, UART_LCR_DLAB); /* access DLL&DLM */
    sc16is7x2_write(client, UART_DLL, ch, chan->quot & 0xff);
    sc16is7x2_write(client, UART_DLM, ch, chan->quot >> 8);
    sc16is7x2_write(client, UART_LCR, ch, chan->lcr);     /* reset DLAB */

    chan->handle_baud = false;
}

static void sc16is7x2_handle_regs(struct i2c_client *client, unsigned ch)
{
    struct sc16is7x2_chip *ts = i2c_get_clientdata(client);
    struct sc16is7x2_channel *chan = &ts->channel[ch];

    if (!chan->handle_regs)
        return;

    printk("%s\n", __func__);

    sc16is7x2_write(client, UART_LCR, ch, 0xBF);  /* access EFR */
    sc16is7x2_write(client, UART_EFR, ch, chan->efr);
    sc16is7x2_write(client, UART_LCR, ch, chan->lcr);
    sc16is7x2_write(client, UART_FCR, ch, chan->fcr);
    sc16is7x2_write(client, UART_MCR, ch, chan->mcr);
    sc16is7x2_write(client, UART_IER, ch, chan->ier);


    //~ unsigned char test_char_r;
    //~ unsigned char test_char_w = 'H';
    //~
    //~ sc16is7x2_write(client, REG_SPR, ch, test_char_w);
    //~ test_char_r = sc16is7x2_read(client, REG_SPR, ch);
    //~
    //~ printk("test char in=%d, out=%d\n", test_char_w, test_char_r);

    chan->handle_regs = false;
}

static void sc16is7x2_read_status(struct i2c_client *client, unsigned ch)
{
    struct sc16is7x2_chip *ts = i2c_get_clientdata(client);
    struct sc16is7x2_channel *chan = &ts->channel[ch];
    /*	struct spi_message m;
    struct spi_transfer t;
    u8 *buf = chan->buf; */
    u8 ier;

#ifdef DEBUG

    //~ ier = sc16is7x2_read(client, UART_IER, ch);
#endif
    printk("%s channel %d\n", __func__, ch);
    ier = sc16is7x2_read(client, UART_IER, ch);


    chan->iir = sc16is7x2_read(client, UART_IIR, ch);
    chan->msr = sc16is7x2_read(client, UART_MSR, ch);
    chan->lsr = sc16is7x2_read(client, UART_LSR, ch);

    //~ printk(" %s ier=0x%02x iir=0x%02x msr=0x%02x lsr=0x%02x\n",
    //~ __func__, ier, chan->iir, chan->msr, chan->lsr);

    /*
    buf[0] = read_cmd(UART_IER, ch);
    buf[1] = read_cmd(UART_IIR, ch);
    buf[2] = read_cmd(UART_MSR, ch);
    buf[3] = read_cmd(UART_LSR, ch);

    t.tx_buf = buf;
    t.rx_buf = &buf[16];
    t.len = 5;

    spi_message_init(&m);
    spi_message_add_tail(&t, &m);
    spi_sync(ts->spi, &m); */

}

static void sc16is7x2_handle_channel(struct work_struct *w)
{
    struct sc16is7x2_channel *chan = container_of(w, struct sc16is7x2_channel, work);
    struct sc16is7x2_chip *ts = chan->chip;
    unsigned ch = (chan == ts->channel) ? 0 : 1;

    printk("%s channel %d\n", __func__, ch);

    int rxlvl = 0;
    unsigned num_read = 0;

    struct timespec ts_start;
    getnstimeofday(&ts_start);
    //~ printk("call queue work at %lu s, %lu ns\n", ts_start.tv_sec, ts_start.tv_nsec);

#ifdef DEBUG
    printk("%s (%i) %s\n", __func__, ch,
           chan->handle_irq ? "irq" : "");
    chan->handle_irq = false;
#endif
    //~ printk("%s (%i)\n", __func__, ch);

    //~ chan->ier &= ~UART_IER_RLSI;
    //~ chan->ier = 0;
    //~
    //~ sc16is7x2_write(client, UART_IER, ch, 0);
    //~ sc16is7x2_write(client, UART_IER, 0, 0);
    //~ sc16is7x2_write(client, UART_IER, 1, 0);

    //~ disable_irq(ts->spi->irq);
    do {
        sc16is7x2_handle_baud(ts->client, ch);
        sc16is7x2_handle_regs(ts->client, ch);

        do {
            rxlvl = sc16is7x2_handle_rx(ts->client, ch);
            ++num_read;
        } while ((rxlvl > 16) && (num_read < 10));

        sc16is7x2_handle_tx(ts->client, ch);

        sc16is7x2_read_status(ts->client, ch); // read all registers at once

        //~ sc16is7x2_handle_rx(ts, ch);
        //~ sc16is7x2_handle_rx(ts, ch);
        //~ sc16is7x2_handle_rx(ts, ch);
        //~ sc16is7x2_handle_rx(ts, ch);

    } while (!(chan->iir & UART_IIR_NO_INT));

    //~ enable_irq(ts->spi->irq);

    //~ chan->ier |= UART_IER_RLSI;
    //~ sc16is7x2_write(ts->client, UART_IER, ch, chan->ier);

    //~ printk("%s finished\n", __func__);
}

static void sc16is7x2_test_spi_complete(void *ctx)
{
    printk("test i2c transfer completed\n");
}

/* ******************************** UART ********************************* */

#define to_sc16is7x2_channel(port) \
    container_of(port, struct sc16is7x2_channel, uart)

static unsigned int sc16is7x2_tx_empty(struct uart_port *port)
{
    struct sc16is7x2_channel *chan = to_sc16is7x2_channel(port);
    struct sc16is7x2_chip *ts = chan->chip;
    unsigned lsr;

    printk("%s = %s\n", __func__,
           chan->lsr & UART_LSR_TEMT ? "yes" : "no");

    lsr = chan->lsr;
    return lsr & UART_LSR_TEMT ? TIOCSER_TEMT : 0;
}

static unsigned int sc16is7x2_get_mctrl(struct uart_port *port)
{
    struct sc16is7x2_channel *chan = to_sc16is7x2_channel(port);
    struct sc16is7x2_chip *ts = chan->chip;
    unsigned int status;
    unsigned int ret;

    printk("%s (0x%02x)\n", __func__, chan->msr);

    status = chan->msr;

    ret = 0;
    if (status & UART_MSR_DCD)
        ret |= TIOCM_CAR;
    if (status & UART_MSR_RI)
        ret |= TIOCM_RNG;
    if (status & UART_MSR_DSR)
        ret |= TIOCM_DSR;
    if (status & UART_MSR_CTS)
        ret |= TIOCM_CTS;
    return ret;
}

static void sc16is7x2_set_mctrl(struct uart_port *port, unsigned int mctrl)
{
    struct sc16is7x2_channel *chan = to_sc16is7x2_channel(port);
    struct sc16is7x2_chip *ts = chan->chip;

    printk("%s (0x%02x)\n", __func__, mctrl);

    /* TODO: set DCD and DSR
     * CTS/RTS is handled automatically
     */
}

static void sc16is7x2_stop_tx(struct uart_port *port)
{
    /* Do nothing */
}

static void sc16is7x2_start_tx(struct uart_port *port)
{
    struct sc16is7x2_channel *chan = to_sc16is7x2_channel(port);
    struct sc16is7x2_chip *ts = chan->chip;

    printk("%s\n", __func__);

    /* Trigger work thread for sending data */
    sc16is7x2_dowork(chan);
}

static void sc16is7x2_stop_rx(struct uart_port *port)
{
    struct sc16is7x2_channel *chan = to_sc16is7x2_channel(port);
    struct sc16is7x2_chip *ts = chan->chip;

    printk("%s\n", __func__);

    chan->ier &= ~UART_IER_RLSI;
    chan->uart.read_status_mask &= ~UART_LSR_DR;
    chan->handle_regs = true;
    /* Trigger work thread for doing the actual configuration change */
    sc16is7x2_dowork(chan);
}

static void sc16is7x2_enable_ms(struct uart_port *port)
{
    struct sc16is7x2_channel *chan = to_sc16is7x2_channel(port);
    //       struct sc16is7x2_chip *ts = chan->chip;

    printk("%s\n", __func__);

    chan->ier |= UART_IER_MSI;
    chan->handle_regs = true;
    /* Trigger work thread for doing the actual configuration change */
    sc16is7x2_dowork(chan);
}

static void sc16is7x2_break_ctl(struct uart_port *port, int break_state)
{
    /* We don't support break control yet, do nothing */
}

static int sc16is7x2_startup(struct uart_port *port)
{
    struct sc16is7x2_channel *chan = to_sc16is7x2_channel(port);
    struct sc16is7x2_chip *ts = chan->chip;
    struct i2c_client *client = ts->client;

    unsigned ch = (&ts->channel[1] == chan) ? 1 : 0;
    unsigned long flags;

    printk("\n%s (%d)\n", __func__, port->line);

    {
        printk("before handle \n");
        //~ //~
        sc16is7x2_write(client, UART_LCR, ch, 0xBF);  /* access EFR */
        sc16is7x2_write(client, UART_EFR, ch, 0x10);
        //~ //~
        //~ //~
        unsigned char test_char_r;
        unsigned char test_char_w = 'H';
        //~ //~
        sc16is7x2_write(client, REG_SPR, ch, test_char_w);
        test_char_r = sc16is7x2_read(client, REG_SPR, ch);
        //~ //~
        printk("test char in=%d, out=%d\n", test_char_w, test_char_r);
        //~ //~
        //~ //~
        printk("after handle \n");
    }

    /* Clear the interrupt registers. */
    sc16is7x2_write(client, UART_IER, ch, 0);
    sc16is7x2_read_status(client, ch);

    /* Initialize work queue */
    chan->workqueue = create_freezable_workqueue("sc16is7x2");
    if (!chan->workqueue) {
        printk("Workqueue creation failed\n");
        return -EBUSY;
    }
    INIT_WORK(&chan->work, sc16is7x2_handle_channel);

    //    /* Setup IRQ. Actually we have a low active IRQ, but we want
    //     * one shot behaviour */
    //    if (request_irq(client->spi->irq, sc16is7x2_irq,
    //                    IRQF_TRIGGER_FALLING | IRQF_SHARED,
    //                    "sc16is7x2", chan)) {
    //        printk("IRQ request failed\n");
    //        destroy_workqueue(chan->workqueue);
    //        chan->workqueue = NULL;
    //        return -EBUSY;
    //    }

    //    spin_lock_irqsave(&chan->uart.lock, flags);
    chan->lcr = UART_LCR_WLEN8;
    chan->mcr = 0;
    chan->fcr = 0;
    chan->ier = UART_IER_RLSI | UART_IER_RDI | UART_IER_THRI;

    chan->efcr = EFCR_RTSCON | EFCR_RTSINVER; // Enable RS-485. FIXME: user generic interface

    spin_unlock_irqrestore(&chan->uart.lock, flags);

    sc16is7x2_write(client, UART_FCR, ch, UART_FCR_ENABLE_FIFO |
                    UART_FCR_CLEAR_RCVR | UART_FCR_CLEAR_XMIT);
    sc16is7x2_write(client, UART_FCR, ch, chan->fcr);
    /* Now, initialize the UART */
    sc16is7x2_write(client, UART_LCR, ch, chan->lcr);
    sc16is7x2_write(client, UART_MCR, ch, chan->mcr);
    sc16is7x2_write(client, UART_IER, ch, chan->ier);

    sc16is7x2_write(client, REG_EFCR, ch, chan->efcr);  // RS-485. FIXME: user generic interface

    return 0;
}

static void sc16is7x2_shutdown(struct uart_port *port)
{
    struct sc16is7x2_channel *chan = to_sc16is7x2_channel(port);
    struct sc16is7x2_chip *ts = chan->chip;
    struct i2c_client *client = ts->client;
    unsigned long flags;
    unsigned ch = port->line & 0x01;

    printk("%s\n", __func__);

    BUG_ON(!chan);
    //    BUG_ON(!ts);

    /* Free the interrupt */
    free_irq(ts->spi->irq, chan);

    if (chan->workqueue) {
        /* Flush and destroy work queue */
        flush_workqueue(chan->workqueue);
        destroy_workqueue(chan->workqueue);
        chan->workqueue = NULL;
    }

    /* Suspend HW */
    spin_lock_irqsave(&chan->uart.lock, flags);
    chan->ier = UART_IERX_SLEEP;
    spin_unlock_irqrestore(&chan->uart.lock, flags);
    sc16is7x2_write(client, UART_IER, ch, chan->ier);
}

static void
sc16is7x2_set_termios(struct uart_port *port, struct ktermios *termios,
                      struct ktermios *old)
{
    struct sc16is7x2_channel *chan = to_sc16is7x2_channel(port);
    struct sc16is7x2_chip *ts = chan->chip;
    //     struct i2c_client *client = ts->client;
    unsigned long flags;
    unsigned int baud;
    u8 lcr, fcr = 0;

    /* Ask the core to calculate the divisor for us. */
    baud = uart_get_baud_rate(port, termios, old,
                              port->uartclk / 16 / 0xffff,
                              port->uartclk / 16);
    chan->quot = uart_get_divisor(port, baud);
    chan->handle_baud = true;

    printk("%s (baud %u)\n", __func__, baud);

    /* set word length */
    switch (termios->c_cflag & CSIZE) {
    case CS5:
        lcr = UART_LCR_WLEN5;
        break;
    case CS6:
        lcr = UART_LCR_WLEN6;
        break;
    case CS7:
        lcr = UART_LCR_WLEN7;
        break;
    default:
    case CS8:
        lcr = UART_LCR_WLEN8;
        break;
    }

    if (termios->c_cflag & CSTOPB)
        lcr |= UART_LCR_STOP;
    if (termios->c_cflag & PARENB)
        lcr |= UART_LCR_PARITY;
    if (!(termios->c_cflag & PARODD))
        lcr |= UART_LCR_EPAR;
#ifdef CMSPAR
    if (termios->c_cflag & CMSPAR)
        lcr |= UART_LCR_SPAR;
#endif

    fcr = UART_FCR_ENABLE_FIFO;
    /* configure the fifo */
    if (baud < 2400)
        fcr |= UART_FCR_TRIGGER_1;
    else
        fcr |= UART_FCR_R_TRIG_01 | UART_FCR_T_TRIG_10;

    chan->efr = UART_EFR_ECB;
    chan->mcr |= UART_MCR_RTS;
    if (termios->c_cflag & CRTSCTS)
        chan->efr |= UART_EFR_CTS | UART_EFR_RTS;

    /*
     * Ok, we're now changing the port state.  Do it with
     * interrupts disabled.
     */
    spin_lock_irqsave(&chan->uart.lock, flags);

    /* we are sending char from a workqueue so enable */
    chan->uart.state->port.tty->low_latency = 1;

    /* Update the per-port timeout. */
    uart_update_timeout(port, termios->c_cflag, baud);

    chan->uart.read_status_mask = UART_LSR_OE | UART_LSR_THRE | UART_LSR_DR;
    if (termios->c_iflag & INPCK)
        chan->uart.read_status_mask |= UART_LSR_FE | UART_LSR_PE;
    if (termios->c_iflag & (BRKINT | PARMRK))
        chan->uart.read_status_mask |= UART_LSR_BI;

    /* Characters to ignore */
    chan->uart.ignore_status_mask = 0;
    if (termios->c_iflag & IGNPAR)
        chan->uart.ignore_status_mask |= UART_LSR_PE | UART_LSR_FE;
    if (termios->c_iflag & IGNBRK) {
        chan->uart.ignore_status_mask |= UART_LSR_BI;
        /*
         * If we're ignoring parity and break indicators,
         * ignore overruns too (for real raw support).
         */
        if (termios->c_iflag & IGNPAR)
            chan->uart.ignore_status_mask |= UART_LSR_OE;
    }

    /* ignore all characters if CREAD is not set */
    if ((termios->c_cflag & CREAD) == 0)
        chan->uart.ignore_status_mask |= UART_LSR_DR;

    /* CTS flow control flag and modem status interrupts */
    chan->ier &= ~UART_IER_MSI;
    if (UART_ENABLE_MS(&chan->uart, termios->c_cflag))
        chan->ier |= UART_IER_MSI;

    chan->lcr = lcr;	/* Save LCR */
    chan->fcr = fcr;	/* Save FCR */
    chan->handle_regs = true;

    spin_unlock_irqrestore(&chan->uart.lock, flags);

    /* Trigger work thread for doing the actual configuration change */
    sc16is7x2_dowork(chan);
}

static const char * sc16is7x2_type(struct uart_port *port)
{
    printk("%s\n", __func__);
    return TYPE_NAME;
}

static void sc16is7x2_release_port(struct uart_port *port)
{
    printk("%s\n", __func__);
}

static int sc16is7x2_request_port(struct uart_port *port)
{
    printk("%s\n", __func__);
    return 0;
}

static void sc16is7x2_config_port(struct uart_port *port, int flags)
{
    struct sc16is7x2_channel *chan = to_sc16is7x2_channel(port);
    struct sc16is7x2_chip *ts = chan->chip;

    printk("%s\n", __func__);
    if (flags & UART_CONFIG_TYPE)
        chan->uart.type = PORT_SC16IS7X2;
}

static int
sc16is7x2_verify_port(struct uart_port *port, struct serial_struct *ser)
{
    if (ser->type == PORT_UNKNOWN || ser->type == PORT_SC16IS7X2)
        return 0;

    return -EINVAL;
}

static struct uart_ops sc16is7x2_uart_ops = {
    .tx_empty	= sc16is7x2_tx_empty,
    .set_mctrl	= sc16is7x2_set_mctrl,
    .get_mctrl	= sc16is7x2_get_mctrl,
    .stop_tx        = sc16is7x2_stop_tx,
    .start_tx	= sc16is7x2_start_tx,
    .stop_rx	= sc16is7x2_stop_rx,
    .enable_ms      = sc16is7x2_enable_ms,
    .break_ctl      = sc16is7x2_break_ctl,
    .startup	= sc16is7x2_startup,
    .shutdown	= sc16is7x2_shutdown,
    .set_termios	= sc16is7x2_set_termios,
    .type		= sc16is7x2_type,
    .release_port   = sc16is7x2_release_port,
    .request_port   = sc16is7x2_request_port,
    .config_port	= sc16is7x2_config_port,
    .verify_port	= sc16is7x2_verify_port,
};

static int sc16is7x2_register_uart_port(struct sc16is7x2_chip *data, unsigned ch)
{
    printk("%s ch %d \n", __func__ , ch);
    struct sc16is7x2_channel *chan = &(data->channel[ch]);
    struct uart_port *uart = &chan->uart;

    /* Disable irqs and go to sleep */
    sc16is7x2_write(data->client, UART_IER, ch, UART_IERX_SLEEP);

    chan->chip = data;

    printk("%s uartclk: %lu \n", __func__ , data->uartclk);
    //    printk(KERN_ERR "irq: %d\n" , data->spi->irq);
    //    uart->irq = data->spi->irq;
    uart->uartclk = data->uartclk;
    uart->fifosize = FIFO_SIZE;
    uart->ops = &sc16is7x2_uart_ops;
    uart->flags = UPF_SKIP_TEST | UPF_BOOT_AUTOCONF;
    uart->line = data->uart_base + ch;
    uart->type = PORT_SC16IS7X2;
    //    uart->dev = &data->spi->dev;

    return uart_add_one_port(&sc16is7x2_uart_driver, uart);
}

/* TODO */
static int __devinit sc16is7x2_probe(struct i2c_client *client,
                                     const struct i2c_device_id *id)
{
    printk("sc16is7x2_probe \n");

    struct sc16is7x2_chip *data;
    struct sc16is7x2_platform_data *pdata;

    int ret = 0;

    if (!i2c_check_functionality(client->adapter,
                                 I2C_FUNC_SMBUS_BYTE_DATA | I2C_FUNC_SMBUS_WORD_DATA |
                                 I2C_FUNC_SMBUS_I2C_BLOCK)) {
        printk(KERN_ERR "%s: needed i2c functionality is not supported\n", __func__);
        return -ENODEV;
    }

    pdata = client->dev.platform_data;
    if (pdata == NULL) {
        printk("sc16is7x2_probe no platform data\n");
        //		return -EINVAL;
    }

    /* Only even uart base numbers are supported */
    data = kzalloc(sizeof(struct sc16is7x2_chip), GFP_KERNEL);
    if (!data) {
        printk(KERN_ERR "%s: no memory\n", __func__);
        ret = -ENOMEM;
        //        goto exit;
    }

    /* default settings at probe */
    data->client = client;
    i2c_set_clientdata(client, data);

    // pdata = client->data.platform_data;

    /* TODO: do something */
#if 0
    data->indio_dev = iio_allocate_device(0);
    if (!data->indio_dev) {
        ret = -ENOMEM;
        goto exit_free1;
    }
    /* Initialize the HMC5843 chip */
    //    hmc5843_init_client(client);

    //    data->indio_dev->info = &hmc5843_info;
    data->indio_dev->dev.parent = &client->dev;
    data->indio_dev->dev_data = (void *)(data);
    data->indio_dev->modes = INDIO_DIRECT_MODE;
    ret = iio_device_register(data->indio_dev);
    if (ret)
        goto exit_free2;

    //    spi_set_drvdata(spi, ts);
    //    ts->spi = spi;

    //    ret = sc16is7x2_probe_dt(ts, spi);
    //    if (ret > 0)
    //        sc16is7x2_probe_pdata(ts, spi);
    //    else if (ret < 0)
    //        return ret;
#endif

    data->uartclk = pdata->uartclk;
    data->uart_base = pdata->uart_base;
    data->gpio_base = pdata->gpio_base;

    if (!data->gpio_base) {
        printk("incorrect uartclk \n");
    }
    if (!data->gpio_base) {
        printk("incorrect gpio_base \n");
        //        return -EINVAL;
    }

    if (data->uart_base & 1) {
        printk("incorrect uart_base \n");
        //        return -EINVAL;
    }

    /* Reset the chip */
    sc16is7x2_write(data->client, REG_IOC, 0, IOC_SRESET);

    ret = sc16is7x2_register_uart_port(data, 0);
    if (ret)
    {
        printk("exit_uart0 \n");
        goto exit_uart0;
    }

    ret = sc16is7x2_register_uart_port(data, 1);
    if (ret)
    {
        printk("exit_uart1 \n");
        goto exit_uart1;
    }

    //    ret = sc16is7x2_register_gpio(data);
    //    if (ret)
    //    {
    //        printk("exit_destroy \n");
    //        goto exit_destroy;
    //    }

    printk(DRIVER_NAME " at 2 UARTs, 8 GPIOs\n"
           "    ttyNSC%d, ttyNSC%d, gpiochip%d\n",
           //             spi->chip_select, spi->irq,
           data->uart_base, data->uart_base + 1,
           data->gpio_base);

    //    printk(DRIVER_NAME " at CS%d (irq %d), 2 UARTs, 8 GPIOs\n"
    //           "    ttyNSC%d, ttyNSC%d, gpiochip%d\n",
    //           spi->chip_select, spi->irq,
    //           data->uart_base, data->uart_base + 1,
    //           data->gpio_base);

    //~
    //~ struct timespec ts_start,ts_end,test_of_time;
    //~
    //~ int i, n;
    //~ n = 50000;
    //~
    //~ getnstimeofday(&ts_start);
    //~ for (i = 0; i < n; ++i) {
    //~ gpio_set_value(17, 0);
    //~ gpio_set_value(17, 1);
    //~ }
    //~ getnstimeofday(&ts_end);
    //~ test_of_time = timespec_sub(ts_end,ts_start);
    //~ printk("2x%d gpio toggle took %lu ns\n", n, test_of_time.tv_nsec);

    return 0;
#if 0
exit_free2:
    iio_free_device(data->indio_dev);
#endif
exit_free1:
    kfree(data);
exit:
    return ret;

exit_uart1:
    uart_remove_one_port(&sc16is7x2_uart_driver, &data->channel[1].uart);

exit_uart0:
    uart_remove_one_port(&sc16is7x2_uart_driver, &data->channel[0].uart);

exit_destroy:
    //    dev_set_drvdata(&spi->dev, NULL);
    kfree(data);
    return ret;
}

static int __devexit sc16is7x2_remove(struct i2c_client *client)
{
    struct sc16is7x2_chip *data = i2c_get_clientdata(client);
    /*  sleep mode to save power */
    //	hmc5843_configure(client, MODE_SLEEP);
#if 0
    iio_device_unregister(data->indio_dev);
#endif
    int ret;

    if (data == NULL)
        return -ENODEV;

    ret = uart_remove_one_port(&sc16is7x2_uart_driver, &data->channel[0].uart);
    if (ret)
        return ret;

    ret = uart_remove_one_port(&sc16is7x2_uart_driver, &data->channel[1].uart);
    if (ret)
        return ret;

#if 0
#ifdef CONFIG_GPIOLIB
    ret = gpiochip_remove(&data->gpio);
    if (ret)
        return ret;
#endif
#endif

    kfree(data);

    return 0;
}

#ifdef CONFIG_PM
static int sc16is7x2_suspend(struct i2c_client *client, pm_message_t msg)
{
    struct sc16is7x2_chip *dev = i2c_get_clientdata(client);

    return 0;
}

static int sc16is7x2_resume(struct i2c_client *client)
{
    struct sc16is7x2_chip *dev = i2c_get_clientdata(client);

    return 0;
}
#else
#define sc16is7x2_suspend NULL
#define sc16is7x2_resume  NULL
#endif

static const struct i2c_device_id sc16is7x2_ids[] = {
    { DRIVER_NAME, 0 },
    { }
};

static struct i2c_driver sc16is7x2_i2c_driver = {
    .probe    = sc16is7x2_probe,
    .remove   = __devexit_p(sc16is7x2_remove),
    .id_table = sc16is7x2_ids,
    .suspend  = sc16is7x2_suspend,
    .resume   = sc16is7x2_resume,
    .driver   = {
        .name = DRIVER_NAME,
    },
};

static int __init sc16is7x2_init(void)
{
    int ret = uart_register_driver(&sc16is7x2_uart_driver);
    if (ret)
        return ret;
    return i2c_add_driver(&sc16is7x2_i2c_driver);
}

static void __exit sc16is7x2_exit(void)
{
    i2c_del_driver(&sc16is7x2_i2c_driver);
    uart_unregister_driver(&sc16is7x2_uart_driver);
}

module_init(sc16is7x2_init);
//subsys_initcall(sc16is7x2_init);
module_exit(sc16is7x2_exit);

MODULE_AUTHOR("artthevan");
MODULE_DESCRIPTION("SC16IS7x2 I2C based UART chip");
MODULE_LICENSE("GPL");
//MODULE_ALIAS("I2C:" DRIVER_NAME);
